(()=>{var n={426:(n,e,t)=>{"use strict";t.d(e,{Z:()=>u});var r=t(537),o=t.n(r),i=t(645),a=t.n(i)()(o());a.push([n.id,"/* #inputDrips {\n  background-color: aliceblue;\n}\n\n#inputSeconds {\n  background-color: aliceblue;\n} */\n\n@keyframes inputCorrect {\n  from {background-color: #ffffff;}\n  to {background-color: #DBFEB8;}\n}\n\n.correct {\n  background-color: #DBFEB8;\n  animation-name: inputCorrect;\n  animation-duration: 2s;\n}\n\n.wrong {\n  background-color: #FF6565;\n}\n\n.empty {\n  background-color: aliceblue;\n}\n.invisible {\n  display: none !important;\n}\n\n.secondsContent {\n  display: none !important;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;;;;;;GAMG;;AAEH;EACE,MAAM,yBAAyB,CAAC;EAChC,IAAI,yBAAyB,CAAC;AAChC;;AAEA;EACE,yBAAyB;EACzB,4BAA4B;EAC5B,sBAAsB;AACxB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,2BAA2B;AAC7B;AACA;EACE,wBAAwB;AAC1B;;AAEA;EACE,wBAAwB;AAC1B",sourcesContent:["/* #inputDrips {\n  background-color: aliceblue;\n}\n\n#inputSeconds {\n  background-color: aliceblue;\n} */\n\n@keyframes inputCorrect {\n  from {background-color: #ffffff;}\n  to {background-color: #DBFEB8;}\n}\n\n.correct {\n  background-color: #DBFEB8;\n  animation-name: inputCorrect;\n  animation-duration: 2s;\n}\n\n.wrong {\n  background-color: #FF6565;\n}\n\n.empty {\n  background-color: aliceblue;\n}\n.invisible {\n  display: none !important;\n}\n\n.secondsContent {\n  display: none !important;\n}\n"],sourceRoot:""}]);const u=a},645:n=>{"use strict";n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var s=this[u][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:n=>{"use strict";n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},726:(n,e,t)=>{var r;t.g,r=function(){return function(){"use strict";var n={165:function(n,e){Object.defineProperty(e,"__esModule",{value:!0}),e.abs=void 0,e.abs=function(n){return"number"!=typeof n&&"bigint"!=typeof n||(n=n.toString()),"-"==n[0]?n.substring(1):n}},217:function(n,e){function t(n){if(a(n))return n;for(var e="",t=n.length,r=n.split(".")[1],o=r?r.length:0,u=0;u<t;u++)n[u]>="0"&&n[u]<="9"?e+=9-parseInt(n[u]):e+=n[u];return i(e,o>0?"0."+new Array(o).join("0")+"1":"1")}function r(n){var e=n.split(".");for(e[0]||(e[0]="0");"0"==e[0][0]&&e[0].length>1;)e[0]=e[0].substring(1);return e[0]+(e[1]?"."+e[1]:"")}function o(n,e){var t=n.split("."),r=e.split("."),o=t[0].length,i=r[0].length;return o>i?r[0]=new Array(Math.abs(o-i)+1).join("0")+(r[0]?r[0]:""):t[0]=new Array(Math.abs(o-i)+1).join("0")+(t[0]?t[0]:""),o=t[1]?t[1].length:0,i=r[1]?r[1].length:0,(o||i)&&(o>i?r[1]=(r[1]?r[1]:"")+new Array(Math.abs(o-i)+1).join("0"):t[1]=(t[1]?t[1]:"")+new Array(Math.abs(o-i)+1).join("0")),[n=t[0]+(t[1]?"."+t[1]:""),e=r[0]+(r[1]?"."+r[1]:"")]}function i(n,e){var t;n=(t=o(n,e))[0],e=t[1];for(var r="",i=0,a=n.length-1;a>=0;a--)if("."!==n[a]){var u=parseInt(n[a])+parseInt(e[a])+i;r=u%10+r,i=Math.floor(u/10)}else r="."+r;return i?i.toString()+r:r}function a(n){return/^0[0]*[.]{0,1}[0]*$/.test(n)}Object.defineProperty(e,"__esModule",{value:!0}),e.pad=e.trim=e.add=void 0,e.add=function(n,e){var u;void 0===e&&(e="0");var s=0,l=-1;"-"==n[0]&&(a(n=n.substring(1))||(s++,l=1,n.length)),"-"==e[0]&&(a(e=e.substring(1))||(s++,l=2,e.length)),n=r(n),e=r(e),n=(u=o(r(n),r(e)))[0],e=u[1],1==s&&(1===l?n=t(n):2===l&&(e=t(e)));var c=i(n,e);return s?2==s?"-"+r(c):n.length<c.length?r(c.substring(1)):"-"+r(t(c)):r(c)},e.trim=r,e.pad=o},423:function(n,e,t){var r=t(217),o=t(165),i=t(350),a=t(182),u=t(415),s=t(213),l=t(664),c=t(26),d=t(916),f=function(){function n(e){void 0===e&&(e="0"),this.value=n.validate(e)}return n.validate=function(n){if(n){if(n=n.toString(),isNaN(n))throw Error("Parameter is not a number: "+n);"+"==n[0]&&(n=n.substring(1))}else n="0";if(n.startsWith(".")?n="0"+n:n.startsWith("-.")&&(n="-0"+n.substr(1)),/e/i.test(n)){var e=n.split(/[eE]/),t=e[0],o=e[1],i="";"-"==(t=(0,r.trim)(t))[0]&&(i="-",t=t.substring(1)),t.indexOf(".")>=0?(o=parseInt(o)+t.indexOf("."),t=t.replace(".","")):o=parseInt(o)+t.length,n=t.length<o?i+t+new Array(o-t.length+1).join("0"):t.length>=o&&o>0?i+(0,r.trim)(t.substring(0,o))+(t.length>o?"."+t.substring(o):""):i+"0."+new Array(1-o).join("0")+t}return n},n.prototype.getValue=function(){return this.value},n.prototype.setValue=function(e){this.value=n.validate(e)},n.getPrettyValue=function(e,t,r){if(t||r){if(!t||!r)throw Error("Illegal Arguments. Should pass both digits and separator or pass none")}else t=3,r=",";var o="-"==(e=n.validate(e)).charAt(0);o&&(e=e.substring(1));for(var i=e.indexOf("."),a="",u=i=i>0?i:e.length;u>0;)u<t?(t=u,u=0):u-=t,a=e.substring(u,u+t)+(u<i-t&&u>=0?r:"")+a;return(o?"-":"")+a+e.substring(i)},n.prototype.getPrettyValue=function(e,t){return n.getPrettyValue(this.value,e,t)},n.round=function(e,t,r){if(void 0===t&&(t=0),void 0===r&&(r=d.RoundingModes.HALF_EVEN),e=n.validate(e),isNaN(t))throw Error("Precision is not a number: "+t);return(0,i.roundOff)(e,t,r)},n.prototype.round=function(e,t){if(void 0===e&&(e=0),void 0===t&&(t=d.RoundingModes.HALF_EVEN),isNaN(e))throw Error("Precision is not a number: "+e);return new n((0,i.roundOff)(this.value,e,t))},n.abs=function(e){return e=n.validate(e),(0,o.abs)(e)},n.prototype.abs=function(){return new n((0,o.abs)(this.value))},n.floor=function(e){return-1===(e=n.validate(e)).indexOf(".")?e:n.round(e,0,d.RoundingModes.FLOOR)},n.prototype.floor=function(){return-1===this.value.indexOf(".")?new n(this.value):new n(this.value).round(0,d.RoundingModes.FLOOR)},n.ceil=function(e){return-1===(e=n.validate(e)).indexOf(".")?e:n.round(e,0,d.RoundingModes.CEILING)},n.prototype.ceil=function(){return-1===this.value.indexOf(".")?new n(this.value):new n(this.value).round(0,d.RoundingModes.CEILING)},n.add=function(e,t){return e=n.validate(e),t=n.validate(t),(0,r.add)(e,t)},n.prototype.add=function(e){return new n((0,r.add)(this.value,e.getValue()))},n.subtract=function(e,t){return e=n.validate(e),t=n.validate(t),(0,c.subtract)(e,t)},n.prototype.subtract=function(e){return new n((0,c.subtract)(this.value,e.getValue()))},n.multiply=function(e,t){return e=n.validate(e),t=n.validate(t),(0,a.multiply)(e,t)},n.prototype.multiply=function(e){return new n((0,a.multiply)(this.value,e.getValue()))},n.divide=function(e,t,r){return e=n.validate(e),t=n.validate(t),(0,u.divide)(e,t,r)},n.prototype.divide=function(e,t){return new n((0,u.divide)(this.value,e.getValue(),t))},n.modulus=function(e,t){return e=n.validate(e),t=n.validate(t),(0,s.modulus)(e,t)},n.prototype.modulus=function(e){return new n((0,s.modulus)(this.value,e.getValue()))},n.compareTo=function(e,t){return e=n.validate(e),t=n.validate(t),(0,l.compareTo)(e,t)},n.prototype.compareTo=function(n){return(0,l.compareTo)(this.value,n.getValue())},n.negate=function(e){return e=n.validate(e),(0,c.negate)(e)},n.prototype.negate=function(){return new n((0,c.negate)(this.value))},n.RoundingModes=d.RoundingModes,n}();n.exports=f},664:function(n,e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.compareTo=void 0;var r=t(217);e.compareTo=function(n,e){var t,o=!1;if("-"==n[0]&&"-"!=e[0])return-1;if("-"!=n[0]&&"-"==e[0])return 1;if("-"==n[0]&&"-"==e[0]&&(n=n.substr(1),e=e.substr(1),o=!0),n=(t=(0,r.pad)(n,e))[0],e=t[1],0==n.localeCompare(e))return 0;for(var i=0;i<n.length;i++)if(n[i]!=e[i])return n[i]>e[i]?o?-1:1:o?1:-1;return 0}},415:function(n,e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.divide=void 0;var r=t(217),o=t(350);e.divide=function(n,e,t){if(void 0===t&&(t=8),0==e)throw new Error("Cannot divide by 0");if(n=n.toString(),e=e.toString(),n=n.replace(/(\.\d*?[1-9])0+$/g,"$1").replace(/\.0+$/,""),e=e.replace(/(\.\d*?[1-9])0+$/g,"$1").replace(/\.0+$/,""),0==n)return"0";var i=0;"-"==e[0]&&(e=e.substring(1),i++),"-"==n[0]&&(n=n.substring(1),i++);var a=e.indexOf(".")>0?e.length-e.indexOf(".")-1:-1;if(e=(0,r.trim)(e.replace(".","")),a>=0){var u=n.indexOf(".")>0?n.length-n.indexOf(".")-1:-1;if(-1==u)n=(0,r.trim)(n+new Array(a+1).join("0"));else if(a>u)n=n.replace(".",""),n=(0,r.trim)(n+new Array(a-u+1).join("0"));else if(a<u){var s=(n=n.replace(".","")).length-u+a;n=(0,r.trim)(n.substring(0,s)+"."+n.substring(s))}else a==u&&(n=(0,r.trim)(n.replace(".","")))}var l=0,c=e.length,d="",f=n.indexOf(".")>-1&&n.indexOf(".")<c?n.substring(0,c+1):n.substring(0,c);if(n=n.indexOf(".")>-1&&n.indexOf(".")<c?n.substring(c+1):n.substring(c),f.indexOf(".")>-1){var p=f.length-f.indexOf(".")-1;c>(f=f.replace(".","")).length&&(p+=c-f.length,f+=new Array(c-f.length+1).join("0")),l=p,d="0."+new Array(p).join("0")}for(t+=2;l<=t;){for(var g=0;parseInt(f)>=parseInt(e);)f=(0,r.add)(f,"-"+e),g++;d+=g,n?("."==n[0]&&(d+=".",l++,n=n.substring(1)),f+=n.substring(0,1),n=n.substring(1)):(l||(d+="."),l++,f+="0")}return(1==i?"-":"")+(0,r.trim)((0,o.roundOff)(d,t-2))}},213:function(n,e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.modulus=void 0;var r=t(415),o=t(350),i=t(182),a=t(26),u=t(916);function s(n){if(-1!=n.indexOf("."))throw new Error("Modulus of non-integers not supported")}e.modulus=function(n,e){if(0==e)throw new Error("Cannot divide by 0");n=n.toString(),e=e.toString(),s(n),s(e);var t="";return"-"==n[0]&&(t="-",n=n.substr(1)),"-"==e[0]&&(e=e.substr(1)),t+(0,a.subtract)(n,(0,i.multiply)(e,(0,o.roundOff)((0,r.divide)(n,e),0,u.RoundingModes.FLOOR)))}},182:function(n,e){function t(n){for(;"0"==n[0];)n=n.substr(1);if(-1!=n.indexOf("."))for(;"0"==n[n.length-1];)n=n.substr(0,n.length-1);return""==n||"."==n?n="0":"."==n[n.length-1]&&(n=n.substr(0,n.length-1)),"."==n[0]&&(n="0"+n),n}Object.defineProperty(e,"__esModule",{value:!0}),e.multiply=void 0,e.multiply=function(n,e){n=n.toString(),e=e.toString();var r=0;"-"==n[0]&&(r++,n=n.substr(1)),"-"==e[0]&&(r++,e=e.substr(1)),n=t(n),e=t(e);var o=0,i=0;-1!=n.indexOf(".")&&(o=n.length-n.indexOf(".")-1),-1!=e.indexOf(".")&&(i=e.length-e.indexOf(".")-1);var a=o+i;if(n=t(n.replace(".","")),e=t(e.replace(".","")),n.length<e.length){var u=n;n=e,e=u}if("0"==e)return"0";for(var s,l,c=e.length,d=0,f=[],p=c-1,g="",v=0;v<c;v++)f[v]=n.length-1;for(v=0;v<2*n.length;v++){for(var y=0,h=e.length-1;h>=p&&h>=0;h--)f[h]>-1&&f[h]<n.length&&(y+=parseInt(n[f[h]--])*parseInt(e[h]));y+=d,d=Math.floor(y/10),g=y%10+g,p--}return g=t((s=g,0==(l=a)?s:(s=l>=s.length?new Array(l-s.length+1).join("0")+s:s).substr(0,s.length-l)+"."+s.substr(s.length-l,l))),1==r&&(g="-"+g),g}},350:function(n,e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.roundOff=void 0;var r=t(916);function o(n,e,t,o){if(!n||n===new Array(n.length+1).join("0"))return!1;if(o===r.RoundingModes.DOWN||!t&&o===r.RoundingModes.FLOOR||t&&o===r.RoundingModes.CEILING)return!1;if(o===r.RoundingModes.UP||t&&o===r.RoundingModes.FLOOR||!t&&o===r.RoundingModes.CEILING)return!0;var i="5"+new Array(n.length).join("0");if(n>i)return!0;if(n<i)return!1;switch(o){case r.RoundingModes.HALF_DOWN:return!1;case r.RoundingModes.HALF_UP:return!0;case r.RoundingModes.HALF_EVEN:default:return parseInt(e[e.length-1])%2==1}}function i(n,e){void 0===e&&(e=0),e||(e=1),"number"==typeof n&&n.toString();for(var t="",r=n.length-1;r>=0;r--){var o=parseInt(n[r])+e;10==o?(e=1,o=0):e=0,t+=o}return e&&(t+=e),t.split("").reverse().join("")}e.roundOff=function n(e,t,a){if(void 0===t&&(t=0),void 0===a&&(a=r.RoundingModes.HALF_EVEN),a===r.RoundingModes.UNNECESSARY)throw new Error("UNNECESSARY Rounding Mode has not yet been implemented");"number"!=typeof e&&"bigint"!=typeof e||(e=e.toString());var u=!1;"-"===e[0]&&(u=!0,e=e.substring(1));var s=e.split("."),l=s[0],c=s[1];if(t<0){if(t=-t,l.length<=t)return"0";var d=l.substr(0,l.length-t);return(u?"-":"")+(d=n(e=d+"."+l.substr(l.length-t)+c,0,a))+new Array(t+1).join("0")}if(0==t)return l.length,o(s[1],l,u,a)&&(l=i(l)),(u&&parseInt(l)?"-":"")+l;if(!s[1])return(u?"-":"")+l+"."+new Array(t+1).join("0");if(s[1].length<t)return(u?"-":"")+l+"."+s[1]+new Array(t-s[1].length+1).join("0");c=s[1].substring(0,t);var f=s[1].substring(t);return f&&o(f,c,u,a)&&(c=i(c)).length>t?(u?"-":"")+i(l,parseInt(c[0]))+"."+c.substring(1):(u&&(parseInt(l)||parseInt(c))?"-":"")+l+"."+c}},916:function(n,e){var t;Object.defineProperty(e,"__esModule",{value:!0}),e.RoundingModes=void 0,(t=e.RoundingModes||(e.RoundingModes={}))[t.CEILING=0]="CEILING",t[t.DOWN=1]="DOWN",t[t.FLOOR=2]="FLOOR",t[t.HALF_DOWN=3]="HALF_DOWN",t[t.HALF_EVEN=4]="HALF_EVEN",t[t.HALF_UP=5]="HALF_UP",t[t.UNNECESSARY=6]="UNNECESSARY",t[t.UP=7]="UP"},26:function(n,e,t){Object.defineProperty(e,"__esModule",{value:!0}),e.negate=e.subtract=void 0;var r=t(217);function o(n){return"-"==n[0]?n.substr(1):"-"+n}e.subtract=function(n,e){return n=n.toString(),e=o(e=e.toString()),(0,r.add)(n,e)},e.negate=o}},e={},t=function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return n[r](i,i.exports,t),i.exports}(423);return t}()},n.exports=r()},379:n=>{"use strict";var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],u=0;u<n.length;u++){var s=n[u],l=r.base?s[0]+r.base:s[0],c=i[l]||0,d="".concat(l," ").concat(c);i[l]=c+1;var f=t(d),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)e[f].references++,e[f].updater(p);else{var g=o(p,r);r.byIndex=u,e.splice(u,0,{identifier:d,updater:g,references:1})}a.push(d)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var u=t(i[a]);e[u].references--}for(var s=r(n,o),l=0;l<i.length;l++){var c=t(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},569:n=>{"use strict";var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{"use strict";n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{"use strict";n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{"use strict";n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{"use strict";n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{"use strict";var n=t(379),e=t.n(n),r=t(795),o=t.n(r),i=t(569),a=t.n(i),u=t(565),s=t.n(u),l=t(216),c=t.n(l),d=t(589),f=t.n(d),p=t(426),g={};function v(n){return/^[1-9]\d*$/.test(n)}g.styleTagTransform=f(),g.setAttributes=s(),g.insert=a().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=c(),e()(p.Z,g),p.Z&&p.Z.locals&&p.Z.locals;var y=t(726);const h=function(n){n=Number(n),n=new y(n);var e=new y(5e-5),t=new y(1440),r=new y(44640),o=new y(525600),i=e.multiply(o).multiply(n).round(0),a=e.multiply(r).multiply(n).round(2),u=e.multiply(t).multiply(n);return{year:i.getPrettyValue(3," "),month:a.getPrettyValue(3," "),day:u.getPrettyValue(3," ")}},m=function(n,e){switch(e){case"correct":n.classList.remove("wrong"),n.classList.add("correct");break;case"wrong":n.classList.remove("correct"),n.classList.add("wrong");break;default:console.error("inputSetColor: Podano błędny parametr: ".concat(e))}},b=function(n,e,t,r){try{if("year"!==r&&"day"!==r&&"month"!==r)throw new SyntaxError("Wrong parameter was given!  ");var o=e(t)[r];document.getElementById(n).innerHTML=" "+o}catch(n){console.error("Error: "+n.message)}};var A=t(726);const w=function(n){if(0===n)return 0;n=new A(n);var e=new A(.25),t=e.divide(n,10).multiply(new A(86400)).round(1),r=e.divide(n,10).multiply(new A(2678400)).round(2),o=e.divide(n,10).multiply(new A(31536e3)).round(0);return{day:t.getPrettyValue(3," "),year:o.getPrettyValue(3," "),month:r.getPrettyValue(3," ")}};var E=document.getElementById("inputDrips"),O=document.getElementById("inputSeconds"),M=document.getElementById("dripsResult"),C=document.getElementById("secondsResult"),x=document.createElement("i");x.classList.add("fa-solid","fa-spinner","fa-spin-pulse"),x.setAttribute("id","spiner"),E.addEventListener("input",(function(){var n=E.value;v(n)?(M.classList.remove("invisible"),m(E,"correct"),setTimeout((function(){b("daily",h,n,"day"),b("monthly",h,n,"month"),b("yearly",h,n,"year")}),550),document.getElementById("yearly").insertAdjacentElement("afterbegin",x)):(m(E,"wrong"),M.classList.add("invisible")),""===n&&(E.classList.remove("wrong"),E.classList.remove("correct"))})),O.addEventListener("input",(function(){var n=O.value;v(n)?(C.classList&&C.classList.remove("invisible"),m(O,"correct"),setTimeout((function(){b("daily2",w,n,"day"),b("monthly2",w,n,"month"),b("yearly2",w,n,"year")}),500),document.getElementById("yearly2").insertAdjacentElement("afterbegin",x)):(m(O,"wrong"),C.classList.add("invisible")),""===n&&(O.classList.remove("wrong"),O.classList.remove("correct"))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,